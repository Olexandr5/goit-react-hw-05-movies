{"version":3,"file":"static/js/778.f5e6da41.chunk.js","mappings":"4OAyEA,EAhEyB,WACvB,IACA,ECR6B,SAAAA,GAC7B,OAAwCC,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAQA,OANAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,GAAoBL,GAASM,MAAK,SAAAC,GAA2B,OAC3DJ,EAAgBI,EAD2C,GAG9D,GAAE,CAACP,IAEG,CAAEE,aAAAA,EACV,CDF0BM,EADLC,EAAAA,EAAAA,MAAZT,SACAE,EAAR,EAAQA,aAEFQ,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAKjB,OACE,4BACE,mBAAQC,KAAK,SAASC,QANL,WACnBH,EAASF,EAASM,MAAMC,KACzB,EAIG,sBAGA,0BACGf,EAAagB,MADhB,KAEGhB,EAAaiB,aACVjB,EAAaiB,aAAaC,UAAU,EAAG,GACvC,GAJN,QAQA,gBACEC,IAAG,yDAAoDnB,EAAaoB,aACpEC,IAAI,mCAGN,uCACc,IACXrB,EAAasB,aACVC,KAAKC,OAAmC,GAA5BxB,EAAasB,cAAmBG,QAAQ,GACpD,GAJN,QAOA,sCACA,uBAAIzB,EAAa0B,YAEjB,oCACA,uBACG1B,EAAa2B,OACV3B,EAAa2B,OAAOC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,KAClD,MAGN,mDAEA,2BACE,yBACE,SAAC,KAAD,CAAMC,GAAG,OAAOlB,MAAO,CAAEC,KAAMP,EAASM,MAAMC,MAA9C,qBAIF,yBACE,SAAC,KAAD,CAAMiB,GAAG,UAAUlB,MAAO,CAAEC,KAAMP,EAASM,MAAMC,MAAjD,2BAKJ,SAAC,KAAD,MAGL,C,+LErEDkB,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,4CAEHC,EAAW,mCAAG,oGACFF,EAAAA,EAAAA,IAAA,6BAAgCC,IAD9B,cACnBE,EADmB,yBAElBA,EAASC,KAAKC,QAAQV,KAAI,YAC/B,MAAO,CACLW,GAFgD,EAAhBA,GAGhCvB,MAHgD,EAAZA,MAKvC,KAPwB,2CAAH,qDAUXwB,EAAY,mCAAG,WAAMC,GAAN,uFACHR,EAAAA,EAAAA,IAAA,uBACLC,EADK,kBACYO,EADZ,2BADG,cACpBL,EADoB,yBAInBA,EAASC,KAAKC,QAAQV,KAAI,YAC/B,MAAO,CACLW,GAFgD,EAAhBA,GAGhCvB,MAHgD,EAAZA,MAKvC,KATyB,2CAAH,sDAYZ0B,EAAe,mCAAG,WAAM5C,GAAN,uFACNmC,EAAAA,EAAAA,IAAA,iBACXnC,GADW,OACDoC,EADC,oBADM,cACvBE,EADuB,yBAItBA,EAASC,MAJa,2CAAH,sDAOfM,EAAe,mCAAG,WAAMC,GAAN,uFACNX,EAAAA,EAAAA,IAAA,iBACXW,EADW,mBACQV,EADR,oBADM,cACvBE,EADuB,yBAKtBA,EAASC,KAAKQ,KAAKjB,KAAI,YAC5B,MAAO,CACLE,KAFqE,EAAxCA,KAG7BgB,UAHqE,EAAlCA,UAInCC,aAJqE,EAAvBA,aAK9CR,GALqE,EAATA,GAO/D,KAZ4B,2CAAH,sDAefS,EAAgB,mCAAG,WAAMJ,GAAN,uFACPX,EAAAA,EAAAA,IAAA,iBACXW,EADW,mBACQV,EADR,2BADO,cACxBE,EADwB,yBAIvBA,EAASC,KAAKC,QAAQV,KAAI,YAC/B,MAAO,CACLqB,OAF0D,EAA1BA,OAGhCC,QAH0D,EAAlBA,QAIxCX,GAJ0D,EAATA,GAMpD,KAV6B,2CAAH,qD","sources":["pages/MovieDetailsPage.jsx","utils/hooks/useMovieDetails.jsx","utils/api/apiMoviedb.jsx"],"sourcesContent":["import {\n  Outlet,\n  Link,\n  useParams,\n  useLocation,\n  useNavigate,\n} from 'react-router-dom';\nimport { useMovieDetails } from 'utils/hooks/useMovieDetails';\n\nconst MovieDetailsPage = () => {\n  const { movieId } = useParams();\n  const { movieDetails } = useMovieDetails(movieId);\n\n  const location = useLocation();\n  const navigate = useNavigate();\n  const hendleGoBack = () => {\n    navigate(location.state.from);\n  };\n\n  return (\n    <div>\n      <button type=\"button\" onClick={hendleGoBack}>\n        Go back\n      </button>\n      <h2>\n        {movieDetails.title} (\n        {movieDetails.release_date\n          ? movieDetails.release_date.substring(0, 4)\n          : ''}\n        )\n      </h2>\n\n      <img\n        src={`https://image.tmdb.org/t/p/w300_and_h450_bestv2${movieDetails.poster_path}`}\n        alt=\"{movieDetails.original_title}\"\n      />\n\n      <p>\n        User Score:{' '}\n        {movieDetails.vote_average\n          ? Math.fround(movieDetails.vote_average * 10).toFixed(0)\n          : ''}\n        %\n      </p>\n      <h3>Overview</h3>\n      <p>{movieDetails.overview}</p>\n\n      <h4>Genres</h4>\n      <p>\n        {movieDetails.genres\n          ? movieDetails.genres.map(genre => genre.name).join(' ')\n          : ''}\n      </p>\n\n      <p>Additional information</p>\n\n      <ul>\n        <li>\n          <Link to=\"cast\" state={{ from: location.state.from }}>\n            Cast\n          </Link>\n        </li>\n        <li>\n          <Link to=\"reviews\" state={{ from: location.state.from }}>\n            Reviews\n          </Link>\n        </li>\n      </ul>\n      <Outlet />\n    </div>\n  );\n};\n\nexport default MovieDetailsPage;\n","import * as API from '../api/apiMoviedb';\nimport { useState, useEffect } from 'react';\n\nexport const useMovieDetails = movieId => {\n  const [movieDetails, setMovieDetails] = useState([]);\n\n  useEffect(() => {\n    API.getMovieDetails(movieId).then(movieDetailsReturnedFromApi =>\n      setMovieDetails(movieDetailsReturnedFromApi)\n    );\n  }, [movieId]);\n\n  return { movieDetails };\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '?api_key=11517d6931d2b5137dd13eb45c72b984';\n\nexport const getTrending = async () => {\n  const response = await axios.get(`/trending/movie/day${API_KEY}`);\n  return response.data.results.map(({ id, title }) => {\n    return {\n      id,\n      title,\n    };\n  });\n};\n\nexport const searchMovies = async inputValue => {\n  const response = await axios.get(\n    `/search/movie${API_KEY}&query=${inputValue}&language=en-US&page=1`\n  );\n  return response.data.results.map(({ id, title }) => {\n    return {\n      id,\n      title,\n    };\n  });\n};\n\nexport const getMovieDetails = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMovieCredits = async moviesId => {\n  const response = await axios.get(\n    `/movie/${moviesId}/credits${API_KEY}&language=en-US`\n  );\n\n  return response.data.cast.map(({ name, character, profile_path, id }) => {\n    return {\n      name,\n      character,\n      profile_path,\n      id,\n    };\n  });\n};\n\nexport const getMoviesReviews = async moviesId => {\n  const response = await axios.get(\n    `/movie/${moviesId}/reviews${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results.map(({ author, content, id }) => {\n    return {\n      author,\n      content,\n      id,\n    };\n  });\n};\n"],"names":["movieId","useState","movieDetails","setMovieDetails","useEffect","API","then","movieDetailsReturnedFromApi","useMovieDetails","useParams","location","useLocation","navigate","useNavigate","type","onClick","state","from","title","release_date","substring","src","poster_path","alt","vote_average","Math","fround","toFixed","overview","genres","map","genre","name","join","to","axios","API_KEY","getTrending","response","data","results","id","searchMovies","inputValue","getMovieDetails","getMovieCredits","moviesId","cast","character","profile_path","getMoviesReviews","author","content"],"sourceRoot":""}